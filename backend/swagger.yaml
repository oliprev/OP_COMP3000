openapi: 3.0.0
info:
  title: COMP3000 API Documentation
  version: 1.0.0
  description: API documentation for my COMP3000 project.

servers:
  - url: http://localhost:9000/api

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - dateOfBirth
                - experienceLevel
                - tosAccepted
                - privacyPolicyAccepted
              properties:
                name:
                  type: string
                  pattern: '^[a-zA-Z\s\-]+$'
                  example: John Doe
                  description: Must contain only letters, spaces, or hyphens
                email:
                  type: string
                  format: email
                  description: Must be a valid email fomrat
                password:
                  type: string
                  minLength: 8
                  description: Must be at least 8 characters long
                dateOfBirth:
                  type: string
                  format: date
                  description: Must be a valid date, cannot be in the future
                experienceLevel:
                  type: string
                  enum: [Beginner, Intermediate, Advanced]
                  description: Must be one of the following; Beginner, Intermediate, Advanced
                tosAccepted:
                  type: boolean
                  description: Terms of Service must be accepted
                privacyPolicyAccepted:
                  type: boolean
                  description: Privacy Policy must be accepted
      responses:
        '201':
          description: User created successfully
        '400':
          description: Validation error

  /users/login:
    post:
      summary: Login a user - returns JWT token
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Must be a valid email format
                password:
                  type: string
                  minLength: 8
                  description: Must be at least 8 characters long
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                  userId:
                    type: string
                    description: ID of the logged-in user
                  experienceLevel:
                    type: string
                    enum: [Beginner, Intermediate, Advanced]
                    description: User's experience level
        '400':
          description: Validation error

  /users/progress:
    get:
      summary: Get user progress
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User progress retrieved successfully
        '404':
          description: User not found
        '500':
          description: Failed to retrieve progress

  /users/{userId}/name:
    get:
      summary: Get user name by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: MongoDB user ID
      responses:
        '200':
          description: User name retrieved successfully
        '400':
          description: Invalid userId
        '404':
          description: User not found
        '500':
          description: Server error

  /users/{userId}:
    get:
      summary: Get full user profile by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: MongoDB user ID
      responses:
        '200':
          description: User data retrieved successfully
        '400':
          description: Invalid userId
        '404':
          description: User not found
        '500':
          description: Server error

  /users/updatepassword:
    put:
      summary: Update user password
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  description: Current user password
                newPassword:
                  type: string
                  minLength: 8
                  description: New password, must be at least 8 characters
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Incorrect current password or invalid request
        '500':
          description: Server error

  /users/progress/complete:
    post:
      summary: Update section completion progress
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - topicId
                - subtopicId
                - sectionId
                - completed
              properties:
                topicId:
                  type: string
                subtopicId:
                  type: string
                sectionId:
                  type: string
                completed:
                  type: boolean
      responses:
        '200':
          description: Progress saved successfully
        '500':
          description: Failed to update progress

  /users/delete:
    delete:
      summary: Delete user account
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Server error

  /gemini/chatbot:
    post:
      summary: Generate AI chatbot response
      tags:
        - Gemini
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - prompt
              properties:
                prompt:
                  type: string
                  maxLength: 200
                  description: User input prompt related to cybersecurity
      responses:
        '200':
          description: AI-generated chatbot response
        '400':
          description: Prompt is not relevant to cybersecurity or is missing
        '500':
          description: Internal server error during generation

  /gemini/generate-email:
    get:
      summary: Generate phishing or legitimate training email
      tags:
        - Gemini
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: experienceLevel
          required: false
          schema:
            type: string
            enum: [Beginner, Intermediate, Advanced]
          description: Learner's experience level (default is Beginner)
      responses:
        '200':
          description: Generated email and type (phishing or legitimate)
        '500':
          description: Email generation failed

  /gemini/generate-content:
    get:
      summary: Generate learning content
      tags:
        - Gemini
      parameters:
        - in: query
          name: topic
          required: true
          schema:
            type: string
        - in: query
          name: subtopic
          required: true
          schema:
            type: string
        - in: query
          name: section
          required: false
          schema:
            type: string
        - in: query
          name: experienceLevel
          required: false
          schema:
            type: string
            enum: [Beginner, Intermediate, Advanced]
        - in: query
          name: step
          required: true
          schema:
            type: string
            enum: [introduction, core-concept-1, core-concept-2, example, summary]
      responses:
        '200':
          description: Learning content generated successfully
        '500':
          description: Error generating learning content

  /gemini/generate-quiz:
    get:
      summary: Generate quiz question
      tags:
        - Gemini
      parameters:
        - in: query
          name: topic
          required: true
          schema:
            type: string
        - in: query
          name: subtopic
          required: true
          schema:
            type: string
        - in: query
          name: section
          required: false
          schema:
            type: string
        - in: query
          name: experienceLevel
          required: false
          schema:
            type: string
            enum: [Beginner, Intermediate, Advanced]
      responses:
        '200':
          description: Quiz content and answer generated successfully
        '500':
          description: Quiz generation failed